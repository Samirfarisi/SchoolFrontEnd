import React, { useState, useEffect } from 'react';
import api from '../api/axios';
import '../styles/admin-dashboard-premium.css';

const AdminDashboardHome = () => {
  // Stats and data states
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalCourses: 0,
    completedCourses: 0,
    savedCourses: 0,
    totalMessages: 0
  });
  
  const [courseDistribution, setCourseDistribution] = useState([]);
  const [userRegistrationData, setUserRegistrationData] = useState([]);
  const [topCourses, setTopCourses] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);
  
  // UI states
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dataSource, setDataSource] = useState('api'); // 'api' or 'fallback'

  // Mock data for guaranteed fallback
  const mockData = {
    users: [
      { id: 1, first_name: 'John', last_name: 'Doe', email: 'john@example.com', created_at: '2023-01-10' },
      { id: 2, first_name: 'Jane', last_name: 'Smith', email: 'jane@example.com', created_at: '2023-02-15' },
      { id: 3, first_name: 'Robert', last_name: 'Brown', email: 'robert@example.com', created_at: '2023-03-20' }
    ],
    courses: [
      { id: 1, title: 'Introduction to React', category_id: 1, views: 156, saves: 17 },
      { id: 2, title: 'Advanced JavaScript', category_id: 1, views: 142, saves: 15 },
      { id: 3, title: 'PHP Basics', category_id: 2, views: 125, saves: 18 },
      { id: 4, title: 'Laravel Fundamentals', category_id: 2, views: 113, saves: 16 },
      { id: 5, title: 'UI/UX Design', category_id: 3, views: 98, saves: 21 }
    ],
    categories: [
      { id: 1, name: 'Frontend' },
      { id: 2, name: 'Backend' },
      { id: 3, name: 'Design' }
    ]
  };

  // Fetch dashboard data
  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        // Try fetching from API with a timeout to prevent long loading
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 second timeout
        
        const response = await api.get('/admin/dashboard/statistics', {
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        const data = response.data;
        
        // Process API response
        if (data && !data.error) {
          processApiData(data);
          setDataSource('api');
        } else {
          throw new Error('API returned invalid data');
        }
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
        
        // Set a user-friendly error message
        if (error.name === 'AbortError') {
          setError('Dashboard API request timed out. Using local data instead.');
        } else if (error.response && error.response.status) {
          setError(`API error (${error.response.status}). Using local data instead.`);
        } else {
          setError('Could not connect to the dashboard API. Using local data instead.');
        }
        
        // Generate reliable fallback data
        generateFallbackData();
        setDataSource('fallback');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchDashboardData();
  }, []);
  
  // Process API response data
  const processApiData = (data) => {
    // Process stats
    if (data.stats) {
      setStats(data.stats);
    } else {
      // Partial fallback if stats are missing
      setStats({
        totalUsers: data.totalUsers || mockData.users.length,
        totalCourses: data.totalCourses || mockData.courses.length,
        completedCourses: data.completedCourses || Math.floor(mockData.courses.length * 0.4),
        savedCourses: data.savedCourses || Math.floor(mockData.courses.length * 0.6),
        totalMessages: data.totalMessages || mockData.users.length * 3
      });
    }
    
    // Process course distribution
    if (data.courseDistribution && data.courseDistribution.length > 0) {
      setCourseDistribution(data.courseDistribution);
    } else {
      setCourseDistribution([
        { name: 'Frontend', count: 2 },
        { name: 'Backend', count: 2 },
        { name: 'Design', count: 1 }
      ]);
    }
    
    // Process user registration data
    if (data.userRegistrationData && data.userRegistrationData.length > 0) {
      setUserRegistrationData(data.userRegistrationData);
    } else {
      // Generate registration data if missing
      setUserRegistrationData([
        { month: 'Jan', count: 2 },
        { month: 'Feb', count: 3 },
        { month: 'Mar', count: 1 },
        { month: 'Apr', count: 4 },
        { month: 'May', count: 2 },
        { month: 'Jun', count: 5 }
      ]);
    }
    
    // Process top courses
    if (data.topCourses && data.topCourses.length > 0) {
      setTopCourses(data.topCourses.map(course => ({
        ...course,
        saves_count: course.saves_count || Math.floor(Math.random() * 20) + 10
      })));
    } else {
      setTopCourses(mockData.courses.map(course => ({
        ...course,
        saves_count: course.saves || Math.floor(Math.random() * 20) + 10
      })));
    }
    
    // Process recent activity
    if (data.recentActivity && data.recentActivity.length > 0) {
      setRecentActivity(data.recentActivity);
    } else {
      setRecentActivity([
        { type: 'user_registered', user: 'John Doe', timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString() },
        { type: 'course_saved', user: 'Jane Smith', course: 'React Basics', timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString() },
        { type: 'course_completed', user: 'Robert Brown', course: 'JavaScript Advanced', timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString() }
      ]);
    }
  };
  
  // Generate complete fallback data
  const generateFallbackData = () => {
    // Set basic stats
    setStats({
      totalUsers: mockData.users.length,
      totalCourses: mockData.courses.length,
      completedCourses: 2,
      savedCourses: 3,
      totalMessages: 10
    });
    
    // Set course distribution
    setCourseDistribution([
      { name: 'Frontend', count: 2 },
      { name: 'Backend', count: 2 },
      { name: 'Design', count: 1 }
    ]);
    
    // Set monthly registration data
    setUserRegistrationData([
      { month: 'Jan', count: 2 },
      { month: 'Feb', count: 3 },
      { month: 'Mar', count: 1 },
      { month: 'Apr', count: 4 },
      { month: 'May', count: 2 },
      { month: 'Jun', count: 5 }
    ]);
    
    // Set top courses data
    setTopCourses(mockData.courses.map(course => ({
      ...course,
      saves_count: course.saves || Math.floor(Math.random() * 20) + 10
    })));
    
    // Set recent activity
    setRecentActivity([
      { 
        type: 'user_registered', 
        user: 'John Doe', 
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString() 
      },
      { 
        type: 'course_saved', 
        user: 'Jane Smith', 
        course: 'React Basics', 
        timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString() 
      },
      { 
        type: 'course_completed', 
        user: 'Robert Brown', 
        course: 'JavaScript Advanced', 
        timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString() 
      }
    ]);
  };
  
  // Format a timestamp to relative time
  const formatTimeAgo = (timestamp) => {
    if (!timestamp) return 'Unknown time';
    
    const date = new Date(timestamp);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) return 'Just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} days ago`;
    
    // If more than a week, show the date
    return new Date(timestamp).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };
  
  // Get highest value in registration data for bar chart scaling
  const maxRegistrationValue = Math.max(...userRegistrationData.map(item => item.count));
  
  return (
    <div className="admin-dashboard">
      {isLoading ? (
        <div className="loading-overlay">
          <div className="spinner"></div>
          <p className="loading-text">Loading dashboard data...</p>
        </div>
      ) : (
        <>
          <div className="dashboard-header">
            <h1 className="dashboard-title">Admin Dashboard</h1>
            <p className="dashboard-subtitle">
              Overview of your platform's performance and activities
            </p>
          </div>
          
          {error && (
            <div className="error-message">
              <div className="error-icon">
                <i className="fas fa-exclamation-triangle"></i>
              </div>
              <div className="error-content">
                <h4 className="error-title">Data Source: Local</h4>
                <p className="error-description">{error}</p>
              </div>
            </div>
          )}
          
          {/* Stats Cards */}
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon users-icon">
                <i className="fas fa-users"></i>
              </div>
              <div className="stat-content">
                <h3 className="stat-title">Total Users</h3>
                <p className="stat-value">{stats.totalUsers}</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon courses-icon">
                <i className="fas fa-graduation-cap"></i>
              </div>
              <div className="stat-content">
                <h3 className="stat-title">Total Courses</h3>
                <p className="stat-value">{stats.totalCourses}</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon completed-icon">
                <i className="fas fa-check-circle"></i>
              </div>
              <div className="stat-content">
                <h3 className="stat-title">Completed</h3>
                <p className="stat-value">{stats.completedCourses}</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon saved-icon">
                <i className="fas fa-bookmark"></i>
              </div>
              <div className="stat-content">
                <h3 className="stat-title">Saved</h3>
                <p className="stat-value">{stats.savedCourses}</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon messages-icon">
                <i className="fas fa-comments"></i>
              </div>
              <div className="stat-content">
                <h3 className="stat-title">Messages</h3>
                <p className="stat-value">{stats.totalMessages}</p>
              </div>
            </div>
          </div>
          
          {/* Charts Section */}
          <div className="grid grid-cols-2">
            {/* Course Distribution */}
            <div className="card">
              <div className="card-header">
                <h2 className="card-title">Course Distribution</h2>
              </div>
              <div className="card-body">
                <div className="distribution-chart">
                  {courseDistribution.map((item, index) => (
                    <div key={index} className="distribution-item">
                      <div className={`distribution-color ${item.name.toLowerCase()}-color`}></div>
                      <div className="distribution-label">{item.name}</div>
                      <div className="distribution-bar-container">
                        <div 
                          className="distribution-bar"
                          style={{ 
                            width: `${(item.count / Math.max(...courseDistribution.map(d => d.count))) * 100}%`,
                            backgroundColor: index === 0 ? '#4361ee' : index === 1 ? '#4cc9f0' : '#f72585'
                          }}
                        ></div>
                      </div>
                      <div className="distribution-value">{item.count}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* User Registration */}
            <div className="card">
              <div className="card-header">
                <h2 className="card-title">User Registration</h2>
              </div>
              <div className="card-body">
                <div className="registration-chart">
                  {userRegistrationData.map((item, index) => (
                    <div key={index} className="bar-column">
                      <div className="bar-wrapper" style={{ height: '180px' }}>
                        <div 
                          className="bar" 
                          style={{ 
                            height: `${(item.count / maxRegistrationValue) * 100}%`
                          }}
                        ></div>
                        <div className="bar-value">{item.count}</div>
                      </div>
                      <div className="bar-label">{item.month}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          {/* Top Courses and Recent Activity */}
          <div className="grid grid-cols-2">
            {/* Top Courses */}
            <div className="card">
              <div className="card-header">
                <h2 className="card-title">Top Courses</h2>
              </div>
              <div className="card-body">
                <table className="courses-table">
                  <thead>
                    <tr>
                      <th width="10%">#</th>
                      <th>Course</th>
                      <th width="20%" style={{ textAlign: 'right' }}>Saves</th>
                    </tr>
                  </thead>
                  <tbody>
                    {topCourses.map((course, index) => (
                      <tr key={index}>
                        <td>
                          <div className={`course-rank rank-${index + 1}`}>{index + 1}</div>
                        </td>
                        <td className="course-title">{course.title}</td>
                        <td style={{ textAlign: 'right' }}>
                          <span className="course-saves">
                            <i className="fas fa-bookmark"></i> {course.saves_count}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
            
            {/* Recent Activity */}
            <div className="card">
              <div className="card-header">
                <h2 className="card-title">Recent Activity</h2>
              </div>
              <div className="card-body">
                <ul className="activity-list">
                  {recentActivity.map((activity, index) => (
                    <li key={index} className="activity-item">
                      <div className={`activity-avatar ${activity.type}-avatar`}>
                        {activity.type === 'user_registered' && <i className="fas fa-user"></i>}
                        {activity.type === 'course_saved' && <i className="fas fa-bookmark"></i>}
                        {activity.type === 'course_completed' && <i className="fas fa-check-circle"></i>}
                      </div>
                      <div className="activity-content">
                        <div className="activity-message">
                          {activity.type === 'user_registered' && (
                            <><span className="activity-username">{activity.user}</span> joined the platform</>
                          )}
                          {activity.type === 'course_saved' && (
                            <><span className="activity-username">{activity.user}</span> saved <span className="activity-course">{activity.course}</span></>
                          )}
                          {activity.type === 'course_completed' && (
                            <><span className="activity-username">{activity.user}</span> completed <span className="activity-course">{activity.course}</span></>
                          )}
                        </div>
                        <div className="activity-timestamp">{formatTimeAgo(activity.timestamp)}</div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default AdminDashboardHome;
