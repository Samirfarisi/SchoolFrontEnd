import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './AdminDashboard.css';

const AdminDashboardHome = () => {
  // State for dashboard data
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalCourses: 0,
    completedCourses: 0,
    savedCourses: 0,
    totalMessages: 0
  });
  
  const [courseDistribution, setCourseDistribution] = useState([]);
  const [registrationData, setRegistrationData] = useState([]);
  const [topCourses, setTopCourses] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);
  
  // UI states
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dataSource, setDataSource] = useState('api');

  // Mock data for fallback
  const mockData = {
    users: [
      { id: 1, name: 'John Doe', email: 'john@example.com', created_at: '2023-01-10' },
      { id: 2, name: 'Jane Smith', email: 'jane@example.com', created_at: '2023-02-15' },
      { id: 3, name: 'Robert Brown', email: 'robert@example.com', created_at: '2023-03-20' }
    ],
    courses: [
      { id: 1, title: 'Introduction to React', category_id: 1, saves: 17 },
      { id: 2, title: 'Advanced JavaScript', category_id: 1, saves: 15 },
      { id: 3, title: 'PHP Basics', category_id: 2, saves: 18 },
      { id: 4, title: 'Laravel Fundamentals', category_id: 2, saves: 16 },
      { id: 5, title: 'UI/UX Design', category_id: 3, saves: 21 }
    ],
    categories: [
      { id: 1, name: 'Frontend' },
      { id: 2, name: 'Backend' },
      { id: 3, name: 'Design' }
    ]
  };

  // Helper function to format time ago
  const formatTimeAgo = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
    
    if (diffInDays < 1) return 'Today';
    if (diffInDays === 1) return 'Yesterday';
    if (diffInDays < 7) return `${diffInDays} days ago`;
    
    return date.toLocaleDateString();
  };

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      setIsLoading(true);
      try {
        // Direct API call with plain axios
        const response = await axios.get('http://127.0.0.1:8000/api/admin/dashboard/statistics', {
          timeout: 5000 // 5 second timeout
        });
        
        if (response.data) {
          // Process API data
          processApiData(response.data);
          setDataSource('api');
        } else {
          throw new Error('Empty response');
        }
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
        
        // Set fallback data
        setFallbackData();
        setDataSource('fallback');
        
        // Set friendly error message
        if (error.code === 'ECONNABORTED') {
          setError('Request timed out. Using local data.');
        } else if (error.response) {
          setError(`API error (${error.response.status}). Using local data.`);
        } else {
          setError('Could not connect to API. Using local data.');
        }
      } finally {
        setIsLoading(false);
      }
    };
    
    loadDashboardData();
  }, []);
  
  // Process API data
  const processApiData = (data) => {
    // Process stats
    if (data.stats) {
      setStats(data.stats);
    } else {
      setStats({
        totalUsers: 3,
        totalCourses: 5,
        completedCourses: 2,
        savedCourses: 3,
        totalMessages: 10
      });
    }
    
    // Process course distribution
    if (data.courseDistribution && data.courseDistribution.length > 0) {
      setCourseDistribution(data.courseDistribution);
    } else {
      setCourseDistribution([
        { name: 'Frontend', count: 2 },
        { name: 'Backend', count: 2 },
        { name: 'Design', count: 1 }
      ]);
    }
    
    // Process registration data
    if (data.userRegistrationData && data.userRegistrationData.length > 0) {
      setRegistrationData(data.userRegistrationData);
    } else {
      setRegistrationData([
        { month: 'Jan', count: 2 },
        { month: 'Feb', count: 3 },
        { month: 'Mar', count: 1 },
        { month: 'Apr', count: 4 },
        { month: 'May', count: 2 },
        { month: 'Jun', count: 5 }
      ]);
    }
    
    // Process top courses
    if (data.topCourses && data.topCourses.length > 0) {
      setTopCourses(data.topCourses);
    } else {
      setTopCourses(mockData.courses);
    }
    
    // Process recent activity
    if (data.recentActivity && data.recentActivity.length > 0) {
      setRecentActivity(data.recentActivity);
    } else {
      setRecentActivity([
        { type: 'user_registered', user: 'John Doe', timestamp: '2023-06-10T10:30:00Z' },
        { type: 'course_saved', user: 'Jane Smith', course: 'React Basics', timestamp: '2023-06-09T15:45:00Z' },
        { type: 'course_completed', user: 'Robert Brown', course: 'JavaScript Advanced', timestamp: '2023-06-08T09:20:00Z' }
      ]);
    }
  };
  
  // Set fallback data
  const setFallbackData = () => {
    setStats({
      totalUsers: 3,
      totalCourses: 5,
      completedCourses: 2,
      savedCourses: 3,
      totalMessages: 10
    });
    
    setCourseDistribution([
      { name: 'Frontend', count: 2 },
      { name: 'Backend', count: 2 },
      { name: 'Design', count: 1 }
    ]);
    
    setRegistrationData([
      { month: 'Jan', count: 2 },
      { month: 'Feb', count: 3 },
      { month: 'Mar', count: 1 },
      { month: 'Apr', count: 4 },
      { month: 'May', count: 2 },
      { month: 'Jun', count: 5 }
    ]);
    
    setTopCourses(mockData.courses);
    
    setRecentActivity([
      { type: 'user_registered', user: 'John Doe', timestamp: '2023-06-10T10:30:00Z' },
      { type: 'course_saved', user: 'Jane Smith', course: 'React Basics', timestamp: '2023-06-09T15:45:00Z' },
      { type: 'course_completed', user: 'Robert Brown', course: 'JavaScript Advanced', timestamp: '2023-06-08T09:20:00Z' }
    ]);
  };

  return (
    <div className="admin-dashboard">
      <div className="dashboard-header">
        <h1>Admin Dashboard</h1>
        <p className="dashboard-subtitle">Platform statistics and activity</p>
      </div>
      
      {isLoading ? (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading dashboard data...</p>
        </div>
      ) : (
        <>
          {error && (
            <div className="alert alert-warning">
              <strong>Data Source: Local</strong> - {error}
            </div>
          )}
          
          {/* Stats Cards */}
          <div className="stats-container">
            <div className="stat-card">
              <div className="stat-icon users-icon">
                <i className="fa fa-users"></i>
              </div>
              <div className="stat-content">
                <div className="stat-value">{stats.totalUsers}</div>
                <div className="stat-label">Total Users</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon courses-icon">
                <i className="fa fa-book"></i>
              </div>
              <div className="stat-content">
                <div className="stat-value">{stats.totalCourses}</div>
                <div className="stat-label">Total Courses</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon completed-icon">
                <i className="fa fa-check-circle"></i>
              </div>
              <div className="stat-content">
                <div className="stat-value">{stats.completedCourses}</div>
                <div className="stat-label">Completed Courses</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon saved-icon">
                <i className="fa fa-heart"></i>
              </div>
              <div className="stat-content">
                <div className="stat-value">{stats.savedCourses}</div>
                <div className="stat-label">Saved Courses</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon messages-icon">
                <i className="fa fa-comments"></i>
              </div>
              <div className="stat-content">
                <div className="stat-value">{stats.totalMessages}</div>
                <div className="stat-label">Total Messages</div>
              </div>
            </div>
          </div>
          
          {/* Main Dashboard Content */}
          <div className="dashboard-content">
            {/* Left Column */}
            <div className="dashboard-column">
              {/* Course Distribution Card */}
              <div className="dashboard-card">
                <div className="card-header">
                  <h2>Course Distribution</h2>
                </div>
                <div className="card-body">
                  <div className="distribution-list">
                    {courseDistribution.map((item, index) => (
                      <div key={index} className="distribution-item">
                        <div className="distribution-color" style={{ backgroundColor: 
                          index === 0 ? '#4361ee' : 
                          index === 1 ? '#4cc9f0' : 
                          '#f72585'
                        }}></div>
                        <div className="distribution-label">{item.name}</div>
                        <div className="distribution-bar-container">
                          <div 
                            className="distribution-bar" 
                            style={{ 
                              width: `${(item.count / Math.max(...courseDistribution.map(d => d.count))) * 100}%`,
                              backgroundColor: 
                                index === 0 ? '#4361ee' : 
                                index === 1 ? '#4cc9f0' : 
                                '#f72585'
                            }}
                          ></div>
                        </div>
                        <div className="distribution-value">{item.count}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Top Courses Card */}
              <div className="dashboard-card">
                <div className="card-header">
                  <h2>Top Courses</h2>
                </div>
                <div className="card-body">
                  <div className="courses-list">
                    {topCourses.map((course, index) => (
                      <div key={index} className="course-item">
                        <div className={`course-rank rank-${index + 1}`}>{index + 1}</div>
                        <div className="course-info">
                          <div className="course-title">{course.title}</div>
                          <div className="course-saves">
                            {course.saves || course.saves_count || Math.floor(Math.random() * 20) + 10} saves
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Right Column */}
            <div className="dashboard-column">
              {/* User Registration Card */}
              <div className="dashboard-card">
                <div className="card-header">
                  <h2>User Registration</h2>
                </div>
                <div className="card-body">
                  <div className="registration-chart">
                    {registrationData.map((item, index) => (
                      <div key={index} className="chart-column">
                        <div className="chart-bar-container">
                          <div 
                            className="chart-bar" 
                            style={{ 
                              height: `${(item.count / Math.max(...registrationData.map(d => d.count))) * 100}%`
                            }}
                          >
                            <span className="chart-value">{item.count}</span>
                          </div>
                        </div>
                        <div className="chart-label">{item.month}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Recent Activity Card */}
              <div className="dashboard-card">
                <div className="card-header">
                  <h2>Recent Activity</h2>
                </div>
                <div className="card-body">
                  <div className="activity-list">
                    {recentActivity.map((activity, index) => (
                      <div key={index} className="activity-item">
                        <div className={`activity-icon ${activity.type}-icon`}>
                          <i className={
                            activity.type === 'user_registered' ? 'fa fa-user' :
                            activity.type === 'course_saved' ? 'fa fa-heart' :
                            'fa fa-check-circle'
                          }></i>
                        </div>
                        <div className="activity-content">
                          <div className="activity-message">
                            {activity.type === 'user_registered' && (
                              <span><strong>{activity.user}</strong> joined the platform</span>
                            )}
                            {activity.type === 'course_saved' && (
                              <span><strong>{activity.user}</strong> saved <strong>{activity.course}</strong></span>
                            )}
                            {activity.type === 'course_completed' && (
                              <span><strong>{activity.user}</strong> completed <strong>{activity.course}</strong></span>
                            )}
                          </div>
                          <div className="activity-time">{formatTimeAgo(activity.timestamp)}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default AdminDashboardHome;
